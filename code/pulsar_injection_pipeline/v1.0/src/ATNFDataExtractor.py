## @package ATNF
# A module used to process and extract data from the ATNF pulsar catalog
# database file.
#
# Author: Rob Lyon
# Email : robert.lyon@manchester.ac.uk
# web   : www.scienceguyrob.com

# Start normal non-doxygen docstring...
"""
    **************************************************************************
    |                                                                        |
    |                   ATNF Data Extractor Version 1.0                      |
    |                                                                        |
    **************************************************************************
    | Description:                                                           |
    |                                                                        |
    | Extracts pulsar name, period, DM, W10 and W50 values from the ATNF     |
    | pulsar catalog database file. Outputs the extracted values to a plain  |
    | text file. Each line of the output file represents a single pulsar     |
    | entry in the catalog file. The script executes in approx 5 minutes.    |
    |                                                                        |
    | Requires pyephem and astropy.                                          |
    |                                                                        |
    **************************************************************************
    | Author: Rob Lyon                                                       |
    | Email : robert.lyon@manchester.ac.uk                                   |
    | web   : www.scienceguyrob.com                                          |
    **************************************************************************
    | Required Command Line Arguments:                                       |
    |                                                                        |
    | -p (string) full path to a ATNF pulsar catalog database file.          |
    |                                                                        |
    | -w (string) full path to a the output file to create.                  |
    |                                                                        |
    **************************************************************************
    | Optional Command Line Arguments:                                       |
    |                                                                        |
    | -v (boolean) verbose debugging flag.                                   |
    |                                                                        |
    **************************************************************************
    | License:                                                               |
    |                                                                        |
    | Code made available under the GPLv3 (GNU General Public License), that |
    | allows you to copy, modify and redistribute the code as you see fit    |
    | (http://www.gnu.org/copyleft/gpl.html). Though a mention to the        |
    | original author using the citation above in derivative works, would be |
    | very much appreciated.                                                 |
    **************************************************************************
"""

# Command Line processing Imports:
from optparse import OptionParser

import os
import sys

# For coordinate transformations.
import ephem

from astropy.coordinates import SkyCoord

# ******************************
#
# CLASS DEFINITION
#
# ******************************

## ATNF Data Extractor Version 1.0
#
# Extracts pulsar name, period, DM, W10 and W50 values from the ATNF
# pulsar catalog database file. Outputs the extracted values to a plain
# text file. Each line of the output file represents a single pulsar
# entry in the catalog file.
#
# Detail:
# For each entry in the ATNF pulsar catalog file, the period, DM, W10
# and W50 values are extracted. These values are then written to a user
# specified output file. Not all entries in the ATNF catalog have a DM,
# period, W10 or W50 value. Missing values which cannot be computed are
# represented by a zero value in the output file. If a catalog entry has
# a period, but no frequency listed, the frequency is computed using:
#
# frequency = 1 / Period
#
# and likewise if the frequency is known but the period isn't,
#
# period = 1 / Frequency.
#
# Example of the expected ATNF input (extract from catalog file, top two entries):
#
#   #CATALOGUE 1.54
#   #
#   # DO NOT EDIT THIS FILE!
#   # Contact Dick Manchester or George Hobbs if in doubt.
#   #
#   PSRJ#  J0006+1834# # # # # cnt96
#   RAJ#   00:06:04.8# # #    2# cn95
#   DECJ#  +18:34:59# # # # 4# cn95
#   P0#    0.69374767047# # # 14   cn95
#   P1#    2.097E-15# # # # 12   cn95
#   PEPOCH   49079.5# # # # #    cn95
#   DM#    12.0# # # # #  6# cn95
#   S400#  0.2# # # # # #    cn95
#   W50#   82# # # # # # # cn95
#   W10#   195# # # # # #    cn95
#   DIST_DM  0.70# # # # # #   tc93
#   DIST_DM1 0.68# # # # # #   cl02
#   SURVEY   ar4
#   @-----------------------------------------------------------------
#   PSRJ#  J0007+7303# # # # # aaa+09c
#   RAJ#   00:07:01.7# # #    2# awd+12
#   DECJ#  +73:03:07.4# # #   8# awd+12
#   F0#    3.165827392# # #   3# awd+12
#   F1#    -3.6120E-12# # #   5# awd+12
#   F2#    4.1E-23# # # #   7# awd+12
#   F3#    5.4E-30# # # #   9# awd+12
#   PEPOCH   54952# # # # # #  awd+12
#   NGLT#  1
#   DIST_AMN 1.1# # # # # #    plmg93
#   DIST_AMX 1.7# # # # # #    plmg93
#   TYPE#  NRAD
#   ASSOC# GRS:2FGL_J0007.0+7303[naa+12],XRS:RX_J0007.0+7303[cdm+10],SNR:CTA1[hgc+04]
#   SURVEY   FermiBlind
#   @-----------------------------------------------------------------
#
#
# Once processed, the extracted information from this ATNF data would be
# represented in the output file as a single line:
#
# Name,Period (s),Frequency (Hz),DM,W10 (ms),W50 (ms)
# J0006+1834,0.69374767047,1.44144628165,12.0,195,82
# J0007+7303,0.315873190853,3.165827392,0,0,0
#
# This file will include the header shown.
#
# Requires pyephem and astropy.
#
# Author: Rob Lyon
# Email : robert.lyon@manchester.ac.uk
# web : www.scienceguyrob.com
#
# Required Command Line Arguments:
#
# -p (string) full path to a ATNF pulsar catalog database file.
#
# -w (string) full path to a the output file to create.
#
# Optional Command Line Arguments:
#
# -v (boolean) verbose debugging flag.
#
#
# License:
#
# Code made available under the GPLv3 (GNU General Public License), that
# allows you to copy, modify and redistribute the code as you see fit
# (http://www.gnu.org/copyleft/gpl.html). Though a mention to the
# original author using the citation above in derivative works, would be
# very much appreciated.
class ATNFDataExtractor:
    """
    Description:
    For each entry in the ATNF pulsar catalog file, the period, DM, W10
    and W50 values are extracted. These values are then written to a user
    specified output file. Not all entries in the ATNF catalog have a DM,
    period, W10 or W50 value. Missing values which cannot be computed are
    represented by a zero value in the output file. If a catalog entry has
    a period, but no frequency listed, the frequency is computed using:

    frequency = 1 / Period

    and likewise if the frequency is known but the period isn't,

    Extracts pulsar name, period, DM, W10 and W50 values from the ATNF
    pulsar catalog database file. Outputs the extracted values to a plain
    text file. Each line of the output file represents a single pulsar
    entry in the catalog file.
    #
    Detail:
    For each entry in the ATNF pulsar catalog file, the period, DM, W10
    and W50 values are extracted. These values are then written to a user
    specified output file. Not all entries in the ATNF catalog have a DM,
    period, W10 or W50 value. Missing values which cannot be computed are
    represented by a zero value in the output file. If a catalog entry has
    a period, but no frequency listed, the frequency is computed using:

    frequency = 1 / Period

    and likewise if the frequency is known but the period isn't,

    period = 1 / Frequency.

    Example of the expected ATNF input (extract from catalog file, top two entries):

    #CATALOGUE 1.54
    #
    # DO NOT EDIT THIS FILE!
    # Contact Dick Manchester or George Hobbs if in doubt.
    #
    PSRJ     J0006+1834                    cnt96
    RAJ      00:06:04.8               2    cn95
    DECJ     +18:34:59                4    cn95
    P0       0.69374767047            14   cn95
    P1       2.097E-15                12   cn95
    PEPOCH   49079.5                       cn95
    DM       12.0                     6    cn95
    S400     0.2                           cn95
    W50      82                            cn95
    W10      195                           cn95
    DIST_DM  0.70                          tc93
    DIST_DM1 0.68                          cl02
    SURVEY   ar4
    @-----------------------------------------------------------------
    PSRJ     J0007+7303                    aaa+09c
    RAJ      00:07:01.7               2    awd+12
    DECJ     +73:03:07.4              8    awd+12
    F0       3.165827392              3    awd+12
    F1       -3.6120E-12              5    awd+12
    F2       4.1E-23                  7    awd+12
    F3       5.4E-30                  9    awd+12
    PEPOCH   54952                         awd+12
    NGLT     1
    DIST_AMN 1.1                           plmg93
    DIST_AMX 1.7                           plmg93
    TYPE     NRAD
    ASSOC    GRS:2FGL_J0007.0+7303[naa+12],XRS:RX_J0007.0+7303[cdm+10],SNR:CTA1[hgc+04]
    SURVEY   FermiBlind
    @-----------------------------------------------------------------


    Once processed, the extracted information from this ATNF data would be
    represented in the output file as a single line:

    Name,Period (s),Frequency (Hz),DM,W10 (ms),W50 (ms)
    J0006+1834,0.69374767047,1.44144628165,12.0,195,82
    J0007+7303,0.315873190853,3.165827392,0,0,0

    This file will include the header shown.
    """

    # ******************************
    #
    # MAIN METHOD AND ENTRY POINT.
    #
    # ******************************

    ## The main method for the class.
    # Main entry point for the Application. Processes command line
    # input and begins extracting data from ATNF files.
    #
    #  @param self The object pointer.
    #  @param argv The unused arguments.
    def main(self, argv=None):
        """Main method.

        Main entry point for the Application. Processes command line
        input and begins extracting data from ATNF files.

        Parameters
        ----------
        self : object
            The object pointer.
        argv : str
            The unused arguments.

        """

        # ****************************************
        #         Execution information
        # ****************************************

        print(__doc__)

        # ****************************************
        #    Command line argument processing
        # ****************************************

        # Python 2.4 argument processing.
        parser = OptionParser()

        # REQUIRED ARGUMENTS
        parser.add_option("-p", action="store", dest="atnfPath",
                          help='Path to a pulsar catalog file.', default="")

        parser.add_option("-w", action="store", dest="outputPath",
                          help='Path to write outputs to.', default="EMPTY")

        # OPTIONAL ARGUMENTS
        parser.add_option("-v", action="store_true", dest="verbose",
                          help='Verbose debugging flag (optional).', default=False)

        (args,options) = parser.parse_args()

        # Update variables with command line parameters.
        self.verbose         = args.verbose
        self.atnfCatalogPath = args.atnfPath
        self.outputPath      = args.outputPath

        # ****************************************
        #   Print command line arguments & Run
        # ****************************************

        print("\n\t**************************")
        print("\t| Command Line Arguments |")
        print("\t**************************")
        print("\tDebug: " + str(self.verbose))
        print("\tPulsar catalog file path: " + str(self.atnfCatalogPath))
        print("\tOutput file path: "         + str(self.outputPath))

        if self.outputPath == "EMPTY":
            print("\n\tYou must supply a valid output file via the -w flag.")
            print("\tExiting...")
            sys.exit()

        # Clear the output file of text.
        if os.path.isfile(self.outputPath):
            self.clearFile(self.outputPath)

        # Write a header to the output file...
        self.appendToFile(self.outputPath,"Name,RA,DEC,GL,GB,Period (s),Frequency (Hz),DM,W10 (ms),W50 (ms)\n")

        # If the catalog file is found...
        if os.path.isfile(self.atnfCatalogPath):

            # Read pulsar catalog file, extract useful variables (Period, Frequency, DM, pulse width)
            self.catalogueFile = open(self.atnfCatalogPath, 'r')  # Read only access

            # Variables we are looking for:
            # Name of the pulsar.
            # PO Barycentric period of the pulsar (s).
            # F0 Barycentric rotation frequency (Hz).
            # DM Dispersion measure (cm-3 pc).
            # W10 Width of pulse at 10% (ms).
            # W50 Width of pulse at 50% of peak (ms).

            Name = "Unknown"
            RA   = "00:00:00"
            DEC  = "00:00:00"
            EL   = "0"
            EB   = "0"
            P0   = "0"
            F0   = "0"
            DM   = "0"
            W10  = "0"
            W50  = "0"

            print("\tNow reading catalog file, line by line...")
            print("\tThis will take a few minutes, please wait....\n\n")

            line_count = 0
            # For each line in the file...
            for line in self.catalogueFile.readlines():
                line_count += 1

                # Update the user every 1000 lines... lets the user known that
                # something useful is happening.
                if line_count % 1000 == 0:
                    print("\tProcessing line: " + str(line_count))

                if line[0] == '#':
                    pass
                    # Ignore these lines.
                elif line[0] == '@':
                    # This signals the end of the current source
                    # int the catalog file, so simply add the details
                    # collected to the output file.

                    # Compute period and frequency if not listed in catalog file.
                    if P0 == "0" and F0 != "0":
                        P0 = str(1.0 / (float(F0)))

                    if F0 == "0" and P0 != "0":
                        F0 = str(1.0 / (float(P0)))

                    # Check coordinates are valid, or convert them to make
                    # them valid. Also does equatorial to galactic conversion.
                    RA, DEC, GL, GB = self.checkCoords(RA, DEC, EL, EB)

                    # Use temporary variable to format entries for output.
                    text = Name + "," + RA + "," + DEC + "," + GL + "," + GB + "," +\
                           P0 + "," + F0 + "," + DM + "," + W10 + "," + W50 + "\n"

                    # Actually write the entry to the output file.
                    self.appendToFile(self.outputPath, text)

                    # Reset variables. This is useful as not all entries in the catalog
                    # have the values we're looking for (e.g. W10 or W50 are often empty).
                    Name = "Unknown"
                    RA   = "00:00:00"
                    DEC  = "00:00:00"
                    EL   = "0"
                    EB   = "0"
                    P0   = "0"
                    F0   = "0"
                    DM   = "0"
                    W10  = "0"
                    W50  = "0"

                elif len(line) > 2:
                    pass
                    # If the line doesn't begin with '#' or '@' and isn't
                    # an empty line, then process it.

                    if line.startswith("PSRJ"):
                        Name = self.extractRAAndDec(line)
                    elif line.startswith("RAJ"):
                        RA = self.extractRAAndDec(line)
                    elif line.startswith("DECJ"):
                        DEC = self.extractRAAndDec(line)
                    elif line.startswith("ELONG"):
                        EL = self.extractFromCatalogFile(line)
                    elif line.startswith("ELAT"):
                        EB = self.extractFromCatalogFile(line)
                    elif line.startswith("P0"):
                        P0 = self.extractFromCatalogFile(line)
                    elif line.startswith("F0"):
                        F0 = self.extractFromCatalogFile(line)
                    elif line.startswith("DM") and "DMEPOCH" not in line:
                        DM = self.extractFromCatalogFile(line)
                    elif line.startswith("W10"):
                        W10 = self.extractFromCatalogFile(line)
                    elif line.startswith("W50"):
                        W50 = self.extractFromCatalogFile(line)
                else:
                    pass  # else ignore

            self.catalogueFile.close()

            print("\n\tLines read: " + str(line_count))
            print("\n\tFinished reading the database file.\n")

        else:
            print("Catalog file not found at: " + str(self.atnfCatalogPath))
            print("\tYou must supply a valid catalog file via the -p flag.")
            print("\tExiting...")

        print("\n\tDone.\n")

        # Used only for formatting purposes.
        print("\n**************************************************************************\n")

    # ****************************************************************************************************

    ## Checks the astronomical coordinates listed for an ATNF entry for completeness.
    # Checks that RA, DEC, GL and GB coordinates are non-empty.
    # Some ATNF entries have no RAJ or DECJ listed, only Equatorial
    # longitude and latitude. Likewise some candidates have RAJ and DECJ
    # listed, but no galactic coordinates.
    #
    # This function computes the RAJ and DECJ using ELong and ELat, if the
    # RAJ or DECJ are missing. Likewise it computes the galactic longitude
    # and latitude using the RAJ and DECJ, if longitude or latitude are missing.
    #
    #  @param self The object pointer.
    #  @param RA The right ascension as a string.
    #  @param DEC The declination as a string.
    #  @param EL The equatorial longitude as a string.
    #  @param EB The equatorial latitude as a string.
    #  @returns a list containing the corrected coordinates in the order [RA,DEC,EL,EB].
    def checkCoords(self, RA, DEC, EL, EB):
        """
        Checks that RA, DEC, GL and GB coordinates are non-empty.
        Some ATNF entries have no RAJ or DECJ listed, only Equatorial
        longitude and latitude. Likewise some candidates have RAJ and DECJ
        listed, but no galactic coordinates.

        This function computes the RAJ and DECJ using ELong and ELat, if the
        RAJ or DECJ are missing. Likewise it computes the galactic longitude
        and latitude using the RAJ and DECJ, if longitude or latitude are missing.

        Parameters
        ----------

        self : object
            The object pointer.
        RA  : string
            The right ascension as a string.
        DEC : string
            The declination as a string.
        EL  : string
            The equatorial longitude as a string.
        EB  : string
            The equatorial latitude as a string.

        Returns
        -------
        list of strings
            A list containing RA, DEC, EL and EB in that order.

        Examples
        --------

        >>> EL = "108.172"
        >>> EB = "-42.985"
        >>> [RA,DEC,EL,EB] = checkCoords("0","0",EL,EB)
        >>> print RA
        00:06:04.8
        >>> print DEC
        +18:34:59
        >>> print EL
        108.172
        >>> RA = "12:40:17.61"
        >>> DEC = "-41:24:51.7"
        >>> [RA,DEC,EL,EB] = checkCoords(RA,DEC,"0","0")
        >>> print EL
        300.688
        >>> print EB
        21.4088

        """

        if "00:00:00" in RA and "00:00:00" in DEC:
            # No RA and DEC provided. Try to create from EL and EB
            if EL == "0" and EB == "0":
                return [RA, DEC, EL, EB] #  Here just return the inputs, since we can't convert...
            else:

                # Use pyephem to convert from ecliptic to Equatorial coordinates...
                ec = ephem.Ecliptic(EL,EB,epoch='2000')
                RA = str(ec.to_radec()[0])
                DEC = str(ec.to_radec()[1])

                # Since we can't just convert from RA and DEC to GL and GB in pyephem,
                # we instead use astropy to do the job. This requires that we first do
                # some daft parsing of the string into pieces, then reform it in to the
                # format required by astropy...
                RA_COMPS = RA.split(":")
                DEC_COMPS = DEC.split(":")
                # Now reform the text into astropy format...
                coordinateString = RA_COMPS[0] +"h"+ RA_COMPS[1] + "m" +RA_COMPS[2] + "s " +\
                                   DEC_COMPS[0] +"d"+ DEC_COMPS[1] + "m" +DEC_COMPS[2] + "s"
                # Now get galactic coordinates.
                GL, GB = str(SkyCoord(coordinateString).galactic.to_string()).split()

                return [RA, DEC, GL, GB]

        if EL == "0" and EB == "0":
            # No EL and EB provided.
            if "00:00:00" in RA and "00:00:00" in DEC:
                return [RA, DEC, EL, EB] #  Here just return the inputs, since we can't convert...
            else:
                # Since we can't just convert from RA and DEC to GL and GB in pyephem,
                # we instead use astropy to do the job. This requires that we first do
                # some daft parsing of the string into pieces, then reform it in to the
                # format required by astropy...
                RA_COMPS = self.checkFormatEquatorialCoordinate(RA).split(":")
                DEC_COMPS = self.checkFormatEquatorialCoordinate(DEC).split(":")
                # Now reform the text into astropy format...
                coordinateString = RA_COMPS[0] +"h"+ RA_COMPS[1] + "m" +RA_COMPS[2] +\
                                   "s " + DEC_COMPS[0] +"d"+ DEC_COMPS[1] + "m" +DEC_COMPS[2] + "s"
                # Now get galactic coordinates.
                GL, GB = str(SkyCoord(coordinateString).galactic.to_string()).split()

                return [RA, DEC, GL, GB]

        return [RA, DEC, EL, EB]

    # ****************************************************************************************************

    ## Checks an equatorial coordinate component (RA or DEC) is correctly formatted.
    # Checks an equatorial coordinate component (RA or DEC) is
    #  correctly formed as a string, i.e. has the format:
    #
    # HH:MM:SS or DD:MM:SS
    #
    #  @param self The object pointer.
    #  @param coord The coordinate as a string.
    #  @returns a correctly formatted coordinate.
    def checkFormatEquatorialCoordinate(self,coord):
        """
        Checks an equatorial coordinate component (RA or DEC) is
        correctly formed as a string, i.e. has the format:

        HH:MM:SS or DD:MM:SS

        Parameters
        ----------

        self : object
            The object pointer.
        coord  : string
            The coordinate as a string.

        Returns
        -------
        string
            A correctly formatted coordinate string.

        Examples
        --------

        >>> coord = "00"
        >>> coord = checkFormatEquatorialCoordinate(coord)
        >>> print coord
        00:00:00
        >>> coord = "11:06"
        >>> coord = checkFormatEquatorialCoordinate(coord)
        >>> print coord
        11:06:00

        """
        components = coord.split(":")
        length = len(components)
        formatedCoord = ""

        if length < 3:
            if length == 1:
                formatedCoord = coord+":00:00"
            elif length == 2:
                formatedCoord = coord+":00"
        else:
            formatedCoord = coord

        return formatedCoord

    # ****************************************************************************************************

    ## Extracts RA and DEC values from a line of text.
    # Extracts RA and DEC values from a line of text from an ATNF catalog file.
    #
    # Expects lines of the form:
    #
    # PSRJ     J0006+1834                    cnt96
    # RAJ      00:06:04.8               2    cn95
    # RAJ      03:48:43.639000          4    afw+13
    # DECJ     +04:32:11.4580           2    afw+13
    #
    #  @param self The object pointer.
    #  @param line The line of text (string) to extract the RA or DEC from.
    #  @returns the string representation of the value stored in the line. For
    #   the strings shown above, the function would return:
    #
    #   "J0006+1834"
    #   "00:06:04.8"
    #   "03:48:43.639000"
    #   "+04:32:11.4580"
    def extractRAAndDec(self, line):
        """
        Extracts RA and DEC values from a line of text from an ATNF catalog file.

        Expects lines of the form:

        PSRJ     J0006+1834                    cnt96
        RAJ      00:06:04.8               2    cn95
        RAJ      03:48:43.639000          4    afw+13
        DECJ     +04:32:11.4580           2    afw+13

        Parameters
        ----------

        self : object
            The object pointer.
        line  : string
            The line of text from the ATNF catalog file.

        Returns
        -------
        string
            A correctly formatted RA of DEC string.

        Examples
        --------

        >>> line = "RAJ      00:06:04.8               2    cn95"
        >>> coord =  extractRAAndDec(line)
        >>> print coord
        00:06:04.8
        >>> line = "DECJ     +04:32:11.4580           2    afw+13"
        >>> coord =  extractRAAndDec(line)
        >>> print coord
        +04:32:11.4580

        """

        # Split string on whitespace. This should return an array of strings (see the
        # more detailed description below).
        components = line.split()

        # If after splitting on whitespace the array has a length greater than zero (has data)...
        if len(components) > 1:

            return components[1].strip()
        else:
            # For some reason there are no string components, so return 0
            return "00:00:00"

    # ****************************************************************************************************

    ## Extracts numerical values from a line of text.
    # Extracts numerical values from a line of text from an ATNF catalog file.
    #
    # Expects lines of the form:
    #
    # P0       0.69374767047            14   cn95
    # P1       2.097E-15                12   cn95
    # DM       12.0                     6    cn95
    # W50      82                            cn95
    #
    #  @param self The object pointer.
    #  @param line The line of text (string) to extract the numerical values from.
    #  @returns the string representation of the numerical value stored in the line. For
    #   the strings shown above, the function would return:
    #
    #   "0.69374767047"
    #   "2.097E-15"
    #   "12.0"
    #   "82"
    def extractFromCatalogFile(self,line):
        """
        Extracts numerical values from a line of text from an ATNF catalog file.

        Expects lines of the form:

        P0       0.69374767047            14   cn95
        P1       2.097E-15                12   cn95
        DM       12.0                     6    cn95
        W50      82                            cn95

        Parameters
        ----------

        self : object
            The object pointer.
        line  : string
            The line of text from the ATNF catalog file.

        Returns
        -------
        string
            The string representation of the value stored in the line.

        Examples
        --------

        >>> line = "P0       0.69374767047            14   cn95"
        >>> value =  extractFromCatalogFile(line)
        >>> print value
        0.69374767047
        >>> line = "P1       2.097E-15                12   cn95"
        >>> value =  extractFromCatalogFile(line)
        >>> print value
        2.097E-15
        >>> line = "DM       12.0                     6    cn95"
        >>> value =  extractFromCatalogFile(line)
        >>> print value
        12.0
        >>> line = "W50      82                            cn95"
        >>> value =  extractFromCatalogFile(line)
        >>> print value
        82

        """

        # Split string on whitespace. This should return an array of strings (see the
        # more detailed description below).
        components = line.split()

        # If after splitting on whitespace the array has a length greater than zero (has data)...
        if len(components) > 0:
            return components[1].strip()
        else:
            # For some reason there are no string components, so return 0
            return "0"

    # ****************************************************************************************************

    ## Appends the provided text to the file at the specified path.
    #
    #  @param self The object pointer.
    #  @param path The full path to the file to write to.
    #  @param text The text to write to the output file.
    def appendToFile(self, path, text):
        """Appends the provided text to the file at the specified path.

        Parameters
        ----------
        self : object
            The object pointer.
        path : str
            The full path to the file to write to.
        text : str
            The text to write to the output file.

        Examples
        --------
        >>> appendToFile("/Users/rob/test.txt","This is my text")

        which will append the text "This is my text" to the file.
        """

        destinationFile = open(path, 'a')
        destinationFile.write(str(text))
        destinationFile.close()

    # ******************************************************************************************

    ## Clears the contents of the file at the specified path.
    #
    #  @param self The object pointer.
    #  @param path The full path to the file to clear.
    def clearFile(self, path):
        """Clears the contents of the file at the specified path.

        Parameters
        ----------
        self : object
            The object pointer.
        path : str
            The full path to the file to clear.

        Examples
        --------
        >>> clearFile("/Users/rob/test.txt")

        which will clear all text in the file.
        """
        open(path, 'w').close()

    # ****************************************************************************************************

if __name__ == '__main__':
    ATNFDataExtractor().main()
